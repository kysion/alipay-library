// ================================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// You can delete these comments if you wish manually maintain this interface file.
// ================================================================================

package alipay_service

import (
	"context"

	"github.com/gogf/gf/v2/frame/g"
	"github.com/kysion/alipay-library/alipay_model"
	enum "github.com/kysion/alipay-library/alipay_model/alipay_enum"
	hook "github.com/kysion/alipay-library/alipay_model/alipay_hook"
	"github.com/kysion/base-library/base_hook"
	"github.com/kysion/gopay/alipay"
	"github.com/kysion/pay-share-library/pay_model"
	"github.com/kysion/pay-share-library/pay_model/pay_enum"
	"github.com/kysion/pay-share-library/pay_model/pay_hook"
)

type (
	IAppAuth interface {
		AppAuth(ctx context.Context, info g.Map) string
	}
	IMerchantH5Pay interface {
		InstallHook(actionType pay_enum.OrderStateType, hookFunc pay_hook.OrderHookFunc)
		TradeCreate(ctx context.Context, info *alipay_model.TradeOrder, merchantApp *alipay_model.AlipayMerchantAppConfig, orderInfo *pay_model.OrderRes, totalAmount float32, userId string) (string, error)
		H5TradePay(ctx context.Context, info *alipay_model.TradeOrder, merchantApp *alipay_model.AlipayMerchantAppConfig, orderInfo *pay_model.OrderRes, totalAmount float32) (string, error)
	}
	IMerchantService interface {
		InstallConsumerHook(infoType hook.ConsumerKey, hookFunc hook.ConsumerHookFunc)
		GetHook() base_hook.BaseHook[hook.ConsumerKey, hook.ConsumerHookFunc]
		GetUserId(ctx context.Context, authCode string, appId string) (res string, err error)
		UserInfoAuth(ctx context.Context, info g.Map) string
	}
	IMerchantTinyappPay interface {
		OrderSend(ctx context.Context)
		TradeCreate(ctx context.Context, info *alipay_model.TradeOrder, merchantApp *alipay_model.AlipayMerchantAppConfig, orderInfo *pay_model.OrderRes, totalAmount float32, userId string) (string, error)
	}
	IPayTrade interface {
		PayTradeCreate(ctx context.Context, info *alipay_model.TradeOrder, userId string, notifyFunc ...hook.NotifyHookFunc) (res string, err error)
		QueryOrderInfo(ctx context.Context, outTradeNo string, merchantApp *alipay_model.AlipayMerchantAppConfig) (aliRsp *alipay.TradeQueryResponse, err error)
		PayTradeClose(ctx context.Context, outTradeNo string, merchantApp *alipay_model.AlipayMerchantAppConfig) (aliRsp *alipay.TradeCloseResponse, err error)
	}
	ISubAccount interface {
		TradeRelationBind(ctx context.Context, appId int64, info *alipay_model.TradeRelationBindReq) (bool, error)
		TradeRelationUnbind(ctx context.Context, appId string, info *alipay_model.TradeRelationBindReq) (*alipay_model.TradeRelationUnbindResponse, error)
		TradeRelationBatchQuery(ctx context.Context, appId string, outRequestNo string) (*alipay_model.TradeRoyaltyRelationQueryRes, error)
		TradeOrderSettleQuery(ctx context.Context, appId string, settleNo string, outRequestNo string, tradeNo string) (*alipay_model.TradeOrderSettleQueryRes, error)
		TradeOrderSettle(ctx context.Context, appId string, info alipay_model.TradeOrderSettleReq) (*alipay_model.TradeOrderSettleResponse, error)
	}
	IWallet interface {
		InstallConsumerHook(infoType enum.ConsumerAction, hookFunc hook.ConsumerHookFunc)
		Wallet(ctx context.Context, info g.Map) string
	}
	IAppVersion interface {
		SubmitVersionAudit(ctx context.Context, info *alipay_model.AppVersionAuditReq, pic *alipay_model.AppVersionAuditPicReq) (*alipay_model.AppVersionAuditRes, error)
		CancelVersionAudit(ctx context.Context, version string) (*alipay_model.CancelVersionAuditRes, error)
		CancelVersion(ctx context.Context, version string) (*alipay_model.CancelVersionRes, error)
		AppOnline(ctx context.Context, version string) (*alipay_model.AppOnlineRes, error)
		AppOffline(ctx context.Context, version string) (*alipay_model.AppOfflineRes, error)
		QueryAppVersionList(ctx context.Context, versionStatus string) (res *alipay_model.QueryAppVersionListRes, err error)
		GetAppVersionDetail(ctx context.Context, version string) (*alipay_model.QueryAppVersionDetailRes, error)
	}
	IMerchantNotify interface {
		InstallNotifyHook(hookKey hook.NotifyKey, hookFunc hook.NotifyHookFunc)
		InstallTradeHook(hookKey hook.TradeHookKey, hookFunc hook.TradeHookFunc)
		InstallSubAccountHook(hookKey hook.SubAccountHookKey, hookFunc hook.SubAccountHookFunc)
		MerchantNotifyServices(ctx context.Context) (string, error)
	}
	IMerchantTransfer interface {
		FundTransUniTransfer(ctx context.Context, appId string, info *alipay_model.FundTransUniTransferReq) (aliRsp *alipay_model.TransUniTransferRes, err error)
	}
)

var (
	localAppVersion         IAppVersion
	localMerchantNotify     IMerchantNotify
	localMerchantTransfer   IMerchantTransfer
	localMerchantTinyappPay IMerchantTinyappPay
	localPayTrade           IPayTrade
	localSubAccount         ISubAccount
	localWallet             IWallet
	localAppAuth            IAppAuth
	localMerchantH5Pay      IMerchantH5Pay
	localMerchantService    IMerchantService
)

func MerchantH5Pay() IMerchantH5Pay {
	if localMerchantH5Pay == nil {
		panic("implement not found for interface IMerchantH5Pay, forgot register?")
	}
	return localMerchantH5Pay
}

func RegisterMerchantH5Pay(i IMerchantH5Pay) {
	localMerchantH5Pay = i
}

func MerchantService() IMerchantService {
	if localMerchantService == nil {
		panic("implement not found for interface IMerchantService, forgot register?")
	}
	return localMerchantService
}

func RegisterMerchantService(i IMerchantService) {
	localMerchantService = i
}

func MerchantTinyappPay() IMerchantTinyappPay {
	if localMerchantTinyappPay == nil {
		panic("implement not found for interface IMerchantTinyappPay, forgot register?")
	}
	return localMerchantTinyappPay
}

func RegisterMerchantTinyappPay(i IMerchantTinyappPay) {
	localMerchantTinyappPay = i
}

func PayTrade() IPayTrade {
	if localPayTrade == nil {
		panic("implement not found for interface IPayTrade, forgot register?")
	}
	return localPayTrade
}

func RegisterPayTrade(i IPayTrade) {
	localPayTrade = i
}

func SubAccount() ISubAccount {
	if localSubAccount == nil {
		panic("implement not found for interface ISubAccount, forgot register?")
	}
	return localSubAccount
}

func RegisterSubAccount(i ISubAccount) {
	localSubAccount = i
}

func Wallet() IWallet {
	if localWallet == nil {
		panic("implement not found for interface IWallet, forgot register?")
	}
	return localWallet
}

func RegisterWallet(i IWallet) {
	localWallet = i
}

func AppAuth() IAppAuth {
	if localAppAuth == nil {
		panic("implement not found for interface IAppAuth, forgot register?")
	}
	return localAppAuth
}

func RegisterAppAuth(i IAppAuth) {
	localAppAuth = i
}

func MerchantNotify() IMerchantNotify {
	if localMerchantNotify == nil {
		panic("implement not found for interface IMerchantNotify, forgot register?")
	}
	return localMerchantNotify
}

func RegisterMerchantNotify(i IMerchantNotify) {
	localMerchantNotify = i
}

func MerchantTransfer() IMerchantTransfer {
	if localMerchantTransfer == nil {
		panic("implement not found for interface IMerchantTransfer, forgot register?")
	}
	return localMerchantTransfer
}

func RegisterMerchantTransfer(i IMerchantTransfer) {
	localMerchantTransfer = i
}

func AppVersion() IAppVersion {
	if localAppVersion == nil {
		panic("implement not found for interface IAppVersion, forgot register?")
	}
	return localAppVersion
}

func RegisterAppVersion(i IAppVersion) {
	localAppVersion = i
}
