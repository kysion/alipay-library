// ================================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// You can delete these comments if you wish manually maintain this interface file.
// ================================================================================

package alipay_service

import (
	"context"

	"github.com/gogf/gf/v2/frame/g"
	"github.com/kuaimk/kmk-share-library/share_model/share_enum"
	"github.com/kuaimk/kmk-share-library/share_model/share_hook"
	"github.com/kysion/alipay-test/alipay_model"
	hook "github.com/kysion/alipay-test/alipay_model/alipay_hook"
)

type (
	IAppAuth interface {
		AppAuth(ctx context.Context, info g.Map) bool
	}
	IMerchantH5Pay interface {
		InstallHook(actionType share_enum.OrderStateType, hookFunc share_hook.OrderHookFunc)
		H5TradeCreate(ctx context.Context, info *alipay_model.TradeOrder, notifyFunc ...hook.NotifyHookFunc)
		QueryOrderInfo(ctx context.Context, outTradeNo string, merchantAppId string, thirdAppId string, appAuthToken string)
	}
	IMerchantNotify interface {
		InstallHook(hookKey hook.NotifyKey, hookFunc hook.NotifyHookFunc)
		MerchantNotifyServices(ctx context.Context) (string, error)
	}
	IMerchantService interface {
		UserInfoAuth(ctx context.Context) (string, error)
		TradeAppPay(ctx context.Context, info alipay_model.TradeAppPay)
		TradeWapPay(ctx context.Context, info alipay_model.TradeOrder)
	}
	IMerchantTinyappPay interface {
		OrderSend(ctx context.Context)
		TradeCreate(ctx context.Context, info *alipay_model.CreateTrade) (aliRsp *alipay_model.TradeCreateResponse, err error)
	}
	IWallet interface {
		Wallet(ctx context.Context, info g.Map) bool
	}
)

var (
	localMerchantH5Pay      IMerchantH5Pay
	localMerchantNotify     IMerchantNotify
	localMerchantService    IMerchantService
	localMerchantTinyappPay IMerchantTinyappPay
	localWallet             IWallet
	localAppAuth            IAppAuth
)

func MerchantService() IMerchantService {
	if localMerchantService == nil {
		panic("implement not found for interface IMerchantService, forgot register?")
	}
	return localMerchantService
}

func RegisterMerchantService(i IMerchantService) {
	localMerchantService = i
}

func MerchantTinyappPay() IMerchantTinyappPay {
	if localMerchantTinyappPay == nil {
		panic("implement not found for interface IMerchantTinyappPay, forgot register?")
	}
	return localMerchantTinyappPay
}

func RegisterMerchantTinyappPay(i IMerchantTinyappPay) {
	localMerchantTinyappPay = i
}

func Wallet() IWallet {
	if localWallet == nil {
		panic("implement not found for interface IWallet, forgot register?")
	}
	return localWallet
}

func RegisterWallet(i IWallet) {
	localWallet = i
}

func AppAuth() IAppAuth {
	if localAppAuth == nil {
		panic("implement not found for interface IAppAuth, forgot register?")
	}
	return localAppAuth
}

func RegisterAppAuth(i IAppAuth) {
	localAppAuth = i
}

func MerchantH5Pay() IMerchantH5Pay {
	if localMerchantH5Pay == nil {
		panic("implement not found for interface IMerchantH5Pay, forgot register?")
	}
	return localMerchantH5Pay
}

func RegisterMerchantH5Pay(i IMerchantH5Pay) {
	localMerchantH5Pay = i
}

func MerchantNotify() IMerchantNotify {
	if localMerchantNotify == nil {
		panic("implement not found for interface IMerchantNotify, forgot register?")
	}
	return localMerchantNotify
}

func RegisterMerchantNotify(i IMerchantNotify) {
	localMerchantNotify = i
}
