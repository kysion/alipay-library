// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"

	"github.com/kysion/base-library/utility/daoctl"
	"github.com/kysion/base-library/utility/daoctl/dao_interface"

	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// AlipayThirdAppConfigDao is the data access object for table alipay_third_app_config.
type AlipayThirdAppConfigDao struct {
	dao_interface.IDao
	table       string                      // table is the underlying table name of the DAO.
	group       string                      // group is the database configuration group name of current DAO.
	columns     AlipayThirdAppConfigColumns // columns contains all the column names of Table for convenient usage.
	daoConfig   *dao_interface.DaoConfig
	ignoreCache bool
	exWhereArr  []string
}

// AlipayThirdAppConfigColumns defines and stores column names for table alipay_third_app_config.
type AlipayThirdAppConfigColumns struct {
	Id                      string // 服务商id
	Name                    string // 服务商name
	AppId                   string // 服务商应用Id
	AppName                 string // 服务商应用名称
	AppType                 string // 服务商应用类型：1小程序  2网站/移动应用  4生活号
	AppAuthToken            string // 服务商授权应用token
	State                   string // 状态：0禁用 1启用
	ExpiresIn               string // Token失效时间
	ReExpiresIn             string // Token刷新限期时间
	UserId                  string // 应用所属账号
	UnionMainId             string // 关联主体id
	SysUserId               string // 用户id
	ExtJson                 string // 拓展字段
	AppGatewayUrl           string // 网关地址
	AppCallbackUrl          string // 回调地址
	AesEncryptKey           string // AES接口内容加密方式
	ServerDomain            string // 服务器域名
	Logo                    string // 服务商应用logo
	HttpsCert               string // 域名证书
	HttpsKey                string // 域名私钥
	PrivateKey              string // 私钥
	PublicKey               string // 公钥
	PublicKeyCert           string // 公钥证书
	AppPublicCertKey        string // 应用证书公钥
	AlipayRootCertPublicKey string // 阿里根证书公钥
	DevState                string // 开发状态：0未上线 1已上线
	InterfaceSignType       string // 接口加签方式：1密钥 2证书
	UpdatedAt               string //
	AppIdMd5                string // 应用id加密md5后的结果
}

// alipayThirdAppConfigColumns holds the columns for table alipay_third_app_config.
var alipayThirdAppConfigColumns = AlipayThirdAppConfigColumns{
	Id:                      "id",
	Name:                    "name",
	AppId:                   "app_id",
	AppName:                 "app_name",
	AppType:                 "app_type",
	AppAuthToken:            "app_auth_token",
	State:                   "state",
	ExpiresIn:               "expires_in",
	ReExpiresIn:             "re_expires_in",
	UserId:                  "user_id",
	UnionMainId:             "union_main_id",
	SysUserId:               "sys_user_id",
	ExtJson:                 "ext_json",
	AppGatewayUrl:           "app_gateway_url",
	AppCallbackUrl:          "app_callback_url",
	AesEncryptKey:           "aes_encrypt_key",
	ServerDomain:            "server_domain",
	Logo:                    "logo",
	HttpsCert:               "https_cert",
	HttpsKey:                "https_key",
	PrivateKey:              "private_key",
	PublicKey:               "public_key",
	PublicKeyCert:           "public_key_cert",
	AppPublicCertKey:        "app_public_cert_key",
	AlipayRootCertPublicKey: "alipay_root_cert_public_key",
	DevState:                "dev_state",
	InterfaceSignType:       "interface_sign_type",
	UpdatedAt:               "updated_at",
	AppIdMd5:                "app_id_md5",
}

// NewAlipayThirdAppConfigDao creates and returns a new DAO object for table data access.
func NewAlipayThirdAppConfigDao(proxy ...dao_interface.IDao) *AlipayThirdAppConfigDao {
	var dao *AlipayThirdAppConfigDao
	if len(proxy) > 0 {
		dao = &AlipayThirdAppConfigDao{
			group:       proxy[0].Group(),
			table:       proxy[0].Table(),
			columns:     alipayThirdAppConfigColumns,
			daoConfig:   proxy[0].DaoConfig(context.Background()),
			IDao:        proxy[0].DaoConfig(context.Background()).Dao,
			ignoreCache: proxy[0].DaoConfig(context.Background()).IsIgnoreCache(),
			exWhereArr:  proxy[0].DaoConfig(context.Background()).Dao.GetExtWhereKeys(),
		}

		return dao
	}

	return &AlipayThirdAppConfigDao{
		group:   "default",
		table:   "alipay_third_app_config",
		columns: alipayThirdAppConfigColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *AlipayThirdAppConfigDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *AlipayThirdAppConfigDao) Table() string {
	return dao.table
}

// Group returns the configuration group name of database of current dao.
func (dao *AlipayThirdAppConfigDao) Group() string {
	return dao.group
}

// Columns returns all column names of current dao.
func (dao *AlipayThirdAppConfigDao) Columns() AlipayThirdAppConfigColumns {
	return dao.columns
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *AlipayThirdAppConfigDao) Ctx(ctx context.Context, cacheOption ...*gdb.CacheOption) *gdb.Model {
	return dao.DaoConfig(ctx, cacheOption...).Model
}

func (dao *AlipayThirdAppConfigDao) DaoConfig(ctx context.Context, cacheOption ...*gdb.CacheOption) *dao_interface.DaoConfig {
	//if dao.daoConfig != nil && len(dao.exWhereArr) == 0 {
	//	return dao.daoConfig
	//}

	var daoConfig = daoctl.NewDaoConfig(ctx, dao, cacheOption...)
	dao.daoConfig = &daoConfig

	if len(dao.exWhereArr) > 0 {
		daoConfig.IgnoreExtModel(dao.exWhereArr...)
		dao.exWhereArr = []string{}

	}

	if dao.ignoreCache {
		daoConfig.IgnoreCache()
	}

	return dao.daoConfig
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *AlipayThirdAppConfigDao) Transaction(ctx context.Context, f func(ctx context.Context, tx gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}

func (dao *AlipayThirdAppConfigDao) GetExtWhereKeys() []string {
	return dao.exWhereArr
}

func (dao *AlipayThirdAppConfigDao) IsIgnoreCache() bool {
	return dao.ignoreCache
}

func (dao *AlipayThirdAppConfigDao) IgnoreCache() dao_interface.IDao {
	dao.ignoreCache = true
	return dao
}
func (dao *AlipayThirdAppConfigDao) IgnoreExtModel(whereKey ...string) dao_interface.IDao {
	dao.exWhereArr = append(dao.exWhereArr, whereKey...)
	return dao
}
