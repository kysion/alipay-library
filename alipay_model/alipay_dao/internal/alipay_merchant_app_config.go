// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"

	"github.com/kysion/base-library/utility/daoctl"
	"github.com/kysion/base-library/utility/daoctl/dao_interface"

	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// AlipayMerchantAppConfigDao is the data access object for table alipay_merchant_app_config.
type AlipayMerchantAppConfigDao struct {
	table   string                         // table is the underlying table name of the DAO.
	group   string                         // group is the database configuration group name of current DAO.
	columns AlipayMerchantAppConfigColumns // columns contains all the column names of Table for convenient usage.
}

// AlipayMerchantAppConfigColumns defines and stores column names for table alipay_merchant_app_config.
type AlipayMerchantAppConfigColumns struct {
	Id                      string // 商家id
	Name                    string // 商家name
	AppId                   string // 商家应用Id
	AppName                 string // 商家应用名称
	AppType                 string // 应用类型：1小程序  2网站/移动应用  4生活号
	AppAuthToken            string // 商家授权应用token
	IsFullProxy             string // 是否全权委托待开发：0否 1是
	State                   string // 状态：0禁用 1启用
	ExpiresIn               string // Token失效时间
	ReExpiresIn             string // Token刷新限期时间
	UserId                  string // 应用所属账号
	UnionMainId             string // 关联主体id
	SysUserId               string // 用户id
	ExtJson                 string // 拓展字段
	AppGatewayUrl           string // 网关地址
	AppCallbackUrl          string // 回调地址
	AesEncryptKey           string // AES接口内容加密方式
	ServerDomain            string // 服务器域名
	Logo                    string // 商家应用logo
	HttpsCert               string // 域名证书
	HttpsKey                string // 域名私钥
	PrivateKey              string // 私钥
	PublicKey               string // 公钥
	PublicKeyCert           string // 公钥证书
	AppPublicCertKey        string // 应用证书公钥
	AlipayRootCertPublicKey string // 阿里根证书公钥
	DevState                string // 开发状态：0未上线 1已上线
	InterfaceSignType       string // 接口加签方式：1密钥 2证书
	UpdatedAt               string //
	AppIdMd5                string // 应用id加密md5后的结果
	ThirdAppId              string // 服务商appId
	NotifyUrl               string // 异步通知地址，允许业务层追加相关参数
	ServerRate              string // 手续费比例，默认0.006%
	UnionMainType           string // 应用关联主体类型，和user_type保持一致
	Version                 string // 应用版本
}

// alipayMerchantAppConfigColumns holds the columns for table alipay_merchant_app_config.
var alipayMerchantAppConfigColumns = AlipayMerchantAppConfigColumns{
	Id:                      "id",
	Name:                    "name",
	AppId:                   "app_id",
	AppName:                 "app_name",
	AppType:                 "app_type",
	AppAuthToken:            "app_auth_token",
	IsFullProxy:             "is_full_proxy",
	State:                   "state",
	ExpiresIn:               "expires_in",
	ReExpiresIn:             "re_expires_in",
	UserId:                  "user_id",
	UnionMainId:             "union_main_id",
	SysUserId:               "sys_user_id",
	ExtJson:                 "ext_json",
	AppGatewayUrl:           "app_gateway_url",
	AppCallbackUrl:          "app_callback_url",
	AesEncryptKey:           "aes_encrypt_key",
	ServerDomain:            "server_domain",
	Logo:                    "logo",
	HttpsCert:               "https_cert",
	HttpsKey:                "https_key",
	PrivateKey:              "private_key",
	PublicKey:               "public_key",
	PublicKeyCert:           "public_key_cert",
	AppPublicCertKey:        "app_public_cert_key",
	AlipayRootCertPublicKey: "alipay_root_cert_public_key",
	DevState:                "dev_state",
	InterfaceSignType:       "interface_sign_type",
	UpdatedAt:               "updated_at",
	AppIdMd5:                "app_id_md5",
	ThirdAppId:              "third_app_id",
	NotifyUrl:               "notify_url",
	ServerRate:              "server_rate",
	UnionMainType:           "union_main_type",
	Version:                 "version",
}

// NewAlipayMerchantAppConfigDao creates and returns a new DAO object for table data access.
func NewAlipayMerchantAppConfigDao(proxy ...dao_interface.IDao) *AlipayMerchantAppConfigDao {
	var dao *AlipayMerchantAppConfigDao
	if len(proxy) > 0 {
		dao = &AlipayMerchantAppConfigDao{
			group:   proxy[0].Group(),
			table:   proxy[0].Table(),
			columns: alipayMerchantAppConfigColumns,
		}
		return dao
	}

	return &AlipayMerchantAppConfigDao{
		group:   "default",
		table:   "alipay_merchant_app_config",
		columns: alipayMerchantAppConfigColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *AlipayMerchantAppConfigDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *AlipayMerchantAppConfigDao) Table() string {
	return dao.table
}

// Group returns the configuration group name of database of current dao.
func (dao *AlipayMerchantAppConfigDao) Group() string {
	return dao.group
}

// Columns returns all column names of current dao.
func (dao *AlipayMerchantAppConfigDao) Columns() AlipayMerchantAppConfigColumns {
	return dao.columns
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *AlipayMerchantAppConfigDao) Ctx(ctx context.Context, cacheOption ...*gdb.CacheOption) *gdb.Model {
	return dao.DaoConfig(ctx, cacheOption...).Model
}

func (dao *AlipayMerchantAppConfigDao) DaoConfig(ctx context.Context, cacheOption ...*gdb.CacheOption) dao_interface.DaoConfig {
	daoConfig := dao_interface.DaoConfig{
		Dao:   dao,
		DB:    dao.DB(),
		Table: dao.table,
		Group: dao.group,
		Model: dao.DB().Model(dao.Table()).Safe().Ctx(ctx),
	}

	if len(cacheOption) == 0 {
		daoConfig.CacheOption = daoctl.MakeDaoCache(dao.Table())
		daoConfig.Model = daoConfig.Model.Cache(*daoConfig.CacheOption)
	} else {
		if cacheOption[0] != nil {
			daoConfig.CacheOption = cacheOption[0]
			daoConfig.Model = daoConfig.Model.Cache(*daoConfig.CacheOption)
		}
	}

	daoConfig.Model = daoctl.RegisterDaoHook(daoConfig.Model)

	return daoConfig
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *AlipayMerchantAppConfigDao) Transaction(ctx context.Context, f func(ctx context.Context, tx gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
