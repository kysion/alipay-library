// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"

	"github.com/kysion/base-library/utility/daoctl"
	"github.com/kysion/base-library/utility/daoctl/dao_interface"

	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// AlipayConsumerConfigDao is the data access object for table alipay_consumer_config.
type AlipayConsumerConfigDao struct {
	dao_interface.IDao
	table       string                      // table is the underlying table name of the DAO.
	group       string                      // group is the database configuration group name of current DAO.
	columns     AlipayConsumerConfigColumns // columns contains all the column names of Table for convenient usage.
	daoConfig   *dao_interface.DaoConfig
	ignoreCache bool
	exWhereArr  []string
}

// AlipayConsumerConfigColumns defines and stores column names for table alipay_consumer_config.
type AlipayConsumerConfigColumns struct {
	Id                 string // id
	UserId             string // 用户账号id
	SysUserId          string // 用户id
	Avatar             string // 头像
	Province           string // 省份
	City               string // 城市
	NickName           string // 昵称
	IsStudentCertified string // 学生认证
	UserType           string // 用户账号类型
	UserState          string // 状态：0未激活、1正常、-1封号、-2异常、-3已注销
	IsCertified        string // 是否实名认证
	Sex                string // 性别：0未知、1男、2女
	AuthToken          string // 授权token
	ExtJson            string // 拓展字段
	AuthState          string // 用户授权状态：1授权、2未授权
	AlipayUserId       string // Alipay的UserId
	ExpiresIn          string // 用户授权Token过期时间
	ReFreshToken       string // 刷新Token
	ReExpiresIn        string // 刷新Token过期时间
	AuthStart          string // 用户授权开始时间
	AppType            string // 应用类型：1小程序  2网站/移动应用  4生活号
	AppId              string // 商家应用Id
	CreatedAt          string //
	UpdatedAt          string //
	DeletedAt          string //
}

// alipayConsumerConfigColumns holds the columns for table alipay_consumer_config.
var alipayConsumerConfigColumns = AlipayConsumerConfigColumns{
	Id:                 "id",
	UserId:             "user_id",
	SysUserId:          "sys_user_id",
	Avatar:             "avatar",
	Province:           "province",
	City:               "city",
	NickName:           "nick_name",
	IsStudentCertified: "is_student_certified",
	UserType:           "user_type",
	UserState:          "user_state",
	IsCertified:        "is_certified",
	Sex:                "sex",
	AuthToken:          "auth_token",
	ExtJson:            "ext_json",
	AuthState:          "auth_state",
	AlipayUserId:       "alipay_user_id",
	ExpiresIn:          "expires_in",
	ReFreshToken:       "re_fresh_token",
	ReExpiresIn:        "re_expires_in",
	AuthStart:          "auth_start",
	AppType:            "app_type",
	AppId:              "app_id",
	CreatedAt:          "created_at",
	UpdatedAt:          "updated_at",
	DeletedAt:          "deleted_at",
}

// NewAlipayConsumerConfigDao creates and returns a new DAO object for table data access.
func NewAlipayConsumerConfigDao(proxy ...dao_interface.IDao) *AlipayConsumerConfigDao {
	var dao *AlipayConsumerConfigDao
	if len(proxy) > 0 {
		dao = &AlipayConsumerConfigDao{
			group:       proxy[0].Group(),
			table:       proxy[0].Table(),
			columns:     alipayConsumerConfigColumns,
			daoConfig:   proxy[0].DaoConfig(context.Background()),
			IDao:        proxy[0].DaoConfig(context.Background()).Dao,
			ignoreCache: proxy[0].DaoConfig(context.Background()).IsIgnoreCache(),
			exWhereArr:  proxy[0].DaoConfig(context.Background()).Dao.GetExtWhereKeys(),
		}

		return dao
	}

	return &AlipayConsumerConfigDao{
		group:   "default",
		table:   "alipay_consumer_config",
		columns: alipayConsumerConfigColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *AlipayConsumerConfigDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *AlipayConsumerConfigDao) Table() string {
	return dao.table
}

// Group returns the configuration group name of database of current dao.
func (dao *AlipayConsumerConfigDao) Group() string {
	return dao.group
}

// Columns returns all column names of current dao.
func (dao *AlipayConsumerConfigDao) Columns() AlipayConsumerConfigColumns {
	return dao.columns
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *AlipayConsumerConfigDao) Ctx(ctx context.Context, cacheOption ...*gdb.CacheOption) *gdb.Model {
	return dao.DaoConfig(ctx, cacheOption...).Model
}

func (dao *AlipayConsumerConfigDao) DaoConfig(ctx context.Context, cacheOption ...*gdb.CacheOption) *dao_interface.DaoConfig {
	//if dao.daoConfig != nil && len(dao.exWhereArr) == 0 {
	//	return dao.daoConfig
	//}

	var daoConfig = daoctl.NewDaoConfig(ctx, dao, cacheOption...)
	dao.daoConfig = &daoConfig

	if len(dao.exWhereArr) > 0 {
		daoConfig.IgnoreExtModel(dao.exWhereArr...)
		dao.exWhereArr = []string{}

	}

	if dao.ignoreCache {
		daoConfig.IgnoreCache()
	}

	return dao.daoConfig
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *AlipayConsumerConfigDao) Transaction(ctx context.Context, f func(ctx context.Context, tx gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}

func (dao *AlipayConsumerConfigDao) GetExtWhereKeys() []string {
	return dao.exWhereArr
}

func (dao *AlipayConsumerConfigDao) IsIgnoreCache() bool {
	return dao.ignoreCache
}

func (dao *AlipayConsumerConfigDao) IgnoreCache() dao_interface.IDao {
	dao.ignoreCache = true
	return dao
}
func (dao *AlipayConsumerConfigDao) IgnoreExtModel(whereKey ...string) dao_interface.IDao {
	dao.exWhereArr = append(dao.exWhereArr, whereKey...)
	return dao
}
